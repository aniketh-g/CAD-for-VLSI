
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `mkIMAc64.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: mkIMAc64.v
Parsing Verilog input from `mkIMAc64.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) translate_off' comments.
Yosys does support them but it is recommended to use `ifdef constructs instead!
Generating RTLIL representation for module `\mkIMAc64'.
Successfully finished Verilog frontend.

-- Running command `synth' --

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$mkIMAc64.v:71969$31892 in module mkIMAc64.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mkIMAc64.$proc$mkIMAc64.v:71969$31892'.
     1/6: $0\state[1:0]
     2/6: $0\product[127:0]
     3/6: $0\p_reg_snew[62:0]
     4/6: $0\p_reg_carries[63:0]
     5/6: $0\p_reg_array_sum[63:0]
     6/6: $0\accum[128:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mkIMAc64.\accum' using process `\mkIMAc64.$proc$mkIMAc64.v:71969$31892'.
  created $dff cell `$procdff$31924' with positive edge clock.
Creating register for signal `\mkIMAc64.\p_reg_array_sum' using process `\mkIMAc64.$proc$mkIMAc64.v:71969$31892'.
  created $dff cell `$procdff$31925' with positive edge clock.
Creating register for signal `\mkIMAc64.\p_reg_carries' using process `\mkIMAc64.$proc$mkIMAc64.v:71969$31892'.
  created $dff cell `$procdff$31926' with positive edge clock.
Creating register for signal `\mkIMAc64.\p_reg_snew' using process `\mkIMAc64.$proc$mkIMAc64.v:71969$31892'.
  created $dff cell `$procdff$31927' with positive edge clock.
Creating register for signal `\mkIMAc64.\product' using process `\mkIMAc64.$proc$mkIMAc64.v:71969$31892'.
  created $dff cell `$procdff$31928' with positive edge clock.
Creating register for signal `\mkIMAc64.\state' using process `\mkIMAc64.$proc$mkIMAc64.v:71969$31892'.
  created $dff cell `$procdff$31929' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 7 empty switches in `\mkIMAc64.$proc$mkIMAc64.v:71969$31892'.
Removing empty process `mkIMAc64.$proc$mkIMAc64.v:71969$31892'.
Cleaned up 7 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.
<suppressed ~8 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..
Removed 5 unused cells and 31724 unused wires.
<suppressed ~8 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module mkIMAc64..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkIMAc64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~71 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkIMAc64.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.

2.6.9. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31913$87 ($mux).
Removed top 1 bits (of 2) from port B of cell mkIMAc64.$eq$mkIMAc64.v:31735$4 ($eq).
Removed top 1 bits (of 2) from port B of cell mkIMAc64.$eq$mkIMAc64.v:31743$8 ($eq).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31774$17 ($mux).
Removed top 1 bits (of 2) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31909$83 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31911$85 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31915$89 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31917$91 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31919$93 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31921$95 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31923$97 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31925$99 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31927$101 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31929$103 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31931$105 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31933$107 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31935$109 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31937$111 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31939$113 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31941$115 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31943$117 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31945$119 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31947$121 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31949$123 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31951$125 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31953$127 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31955$129 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31957$131 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31959$133 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31961$135 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31963$137 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31965$139 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31967$141 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31969$143 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31971$145 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31973$147 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31975$149 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31977$151 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31979$153 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31981$155 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31983$157 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31985$159 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31987$161 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31989$163 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31991$165 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31993$167 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31995$169 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31997$171 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:31999$173 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32001$175 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32003$177 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32005$179 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32007$181 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32009$183 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32011$185 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32013$187 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32015$189 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32017$191 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32019$193 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32021$195 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32023$197 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32025$199 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32027$201 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32029$203 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32031$205 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32033$207 ($mux).
Removed top 63 bits (of 64) from mux cell mkIMAc64.$ternary$mkIMAc64.v:32035$209 ($mux).
Removed top 1 bits (of 2) from mux cell mkIMAc64.$procmux$31897 ($mux).
Removed top 1 bits (of 2) from FF cell mkIMAc64.$procdff$31929 ($dff).
Removed top 1 bits (of 2) from port A of cell mkIMAc64.$eq$mkIMAc64.v:31735$4 ($eq).
Removed top 1 bits (of 2) from wire mkIMAc64.$0\state[1:0].
Removed top 63 bits (of 64) from wire mkIMAc64.IF_IF_wr_a_whas_THEN_wr_a_wget_ELSE_0_BIT_0_AN_ETC__q63.
Removed top 1 bits (of 2) from wire mkIMAc64.IF_wr_state_whas_THEN_wr_state_wget_ELSE_0___d3.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x005496_OR_y005497_THEN_1_ELSE_0__q35.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x01644_OR_y01645_THEN_1_ELSE_0__q31.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x031459_OR_y031460_THEN_1_ELSE_0__q36.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x057422_OR_y057423_THEN_1_ELSE_0__q37.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x08347_OR_y08348_THEN_1_ELSE_0__q12.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x12199_OR_y12200_THEN_1_ELSE_0__q16.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x135311_OR_y135312_THEN_1_ELSE_0__q40.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x161274_OR_y161275_THEN_1_ELSE_0__q41.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x19903_OR_y19904_THEN_1_ELSE_0__q24.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x23755_OR_y23756_THEN_1_ELSE_0__q28.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x265126_OR_y265127_THEN_1_ELSE_0__q45.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x27607_OR_y27608_THEN_1_ELSE_0__q32.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x30458_OR_y30459_THEN_1_ELSE_0__q9.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x343015_OR_y343016_THEN_1_ELSE_0__q48.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x368978_OR_y368979_THEN_1_ELSE_0__q49.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x394941_OR_y394942_THEN_1_ELSE_0__q50.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x420904_OR_y420905_THEN_1_ELSE_0__q51.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x45866_OR_y45867_THEN_1_ELSE_0__q25.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x48717_OR_y48718_THEN_1_ELSE_0__q2.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x498793_OR_y498794_THEN_1_ELSE_0__q54.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x52569_OR_y52570_THEN_1_ELSE_0__q6.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x550719_OR_y550720_THEN_1_ELSE_0__q56.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x576682_OR_y576683_THEN_1_ELSE_0__q57.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x60273_OR_y60274_THEN_1_ELSE_0__q14.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x64125_OR_y64126_THEN_1_ELSE_0__q18.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x67977_OR_y67978_THEN_1_ELSE_0__q22.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x707365_OR_y707366_THEN_1_ELSE_0__q62.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x725472_OR_y725473_THEN_1_ELSE_0__q64.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x75681_OR_y75682_THEN_1_ELSE_0__q30.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x79533_OR_y79534_THEN_1_ELSE_0__q34.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x86236_OR_y86237_THEN_1_ELSE_0__q15.
Removed top 63 bits (of 64) from wire mkIMAc64.IF_x93940_OR_y93941_THEN_1_ELSE_0__q23.
Removed top 1 bits (of 129) from wire mkIMAc64.MUX_accum$write_1__VAL_2.
Removed top 1 bits (of 2) from wire mkIMAc64.state.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..
Removed 0 unused cells and 37 unused wires.
<suppressed ~1 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mkIMAc64:
  creating $macc model for $add$mkIMAc64.v:31728$2 ($add).
  creating $macc model for $add$mkIMAc64.v:32277$331 ($add).
  creating $alu model for $macc $add$mkIMAc64.v:32277$331.
  creating $alu model for $macc $add$mkIMAc64.v:31728$2.
  creating $alu cell for $add$mkIMAc64.v:31728$2: $auto$alumacc.cc:474:replace_alu$31967
  creating $alu cell for $add$mkIMAc64.v:32277$331: $auto$alumacc.cc:474:replace_alu$31970
  created 2 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.
<suppressed ~2 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkIMAc64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~71 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkIMAc64.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.

2.13.9. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.
<suppressed ~66 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkIMAc64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkIMAc64.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.

2.20.9. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=64\B_WIDTH=64\Y_WIDTH=64 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=128\B_WIDTH=128\Y_WIDTH=128 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=128 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=64 for cells of type $lcu.
No more expansions possible.
<suppressed ~33542 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.
<suppressed ~202 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
Removed a total of 0 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..
Removed 229 unused cells and 85 unused wires.
<suppressed ~230 debug messages>

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\mkIMAc64' to `<abc-temp-dir>/input.blif'..
Extracted 34287 gates and 34741 wires to a netlist network with 452 inputs and 321 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:     2198
ABC RESULTS:            ANDNOT cells:     2638
ABC RESULTS:              AOI3 cells:     2202
ABC RESULTS:               MUX cells:      257
ABC RESULTS:              NAND cells:     1171
ABC RESULTS:               NOR cells:     5805
ABC RESULTS:               NOT cells:     2241
ABC RESULTS:              OAI3 cells:     2009
ABC RESULTS:                OR cells:     2513
ABC RESULTS:             ORNOT cells:     1853
ABC RESULTS:              XNOR cells:     3041
ABC RESULTS:               XOR cells:     5277
ABC RESULTS:        internal signals:    33968
ABC RESULTS:           input signals:      452
ABC RESULTS:          output signals:      321
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkIMAc64.
<suppressed ~128 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkIMAc64'.
Removed a total of 0 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkIMAc64..
Removed 1 unused cells and 33165 unused wires.
<suppressed ~31571 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== mkIMAc64 ===

   Number of wires:              30945
   Number of wire bits:          34101
   Number of public wires:          57
   Number of public wire bits:    2897
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              31525
     $_ANDNOT_                    2638
     $_AND_                       2198
     $_AOI3_                      2202
     $_DFF_P_                      321
     $_MUX_                        257
     $_NAND_                      1171
     $_NOR_                       5805
     $_NOT_                       2240
     $_OAI3_                      2009
     $_ORNOT_                     1853
     $_OR_                        2513
     $_XNOR_                      3041
     $_XOR_                       5277

2.27. Executing CHECK pass (checking for obvious problems).
checking module mkIMAc64..
found and reported 0 problems.

-- Writing to `output.blif' using backend `blif' --

3. Executing BLIF backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 001c96ce82
CPU: user 67.92s system 0.09s, MEM: 233.69 MB total, 226.95 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 34% 15x opt_clean (23 sec), 18% 13x opt_expr (12 sec), ...
